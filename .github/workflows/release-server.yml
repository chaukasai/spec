name: Release Server Package

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish-server:
    name: Publish Server Package to PyPI
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for build completion
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              head_sha: context.sha
            });
            
            if (runs.workflow_runs.length === 0) {
              throw new Error('No client release workflow found');
            }
            
            const clientRun = runs.workflow_runs[0];
            let attempts = 0;
            const maxAttempts = 60; // 10 minutes max wait
            
            while (clientRun.status !== 'completed' && attempts < maxAttempts) {
              console.log(`Waiting for client release to complete... (${attempts + 1}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              
              const { data: updatedRun } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: clientRun.id
              });
              
              if (updatedRun.status === 'completed') {
                if (updatedRun.conclusion !== 'success') {
                  throw new Error(`Client release failed with conclusion: ${updatedRun.conclusion}`);
                }
                break;
              }
              attempts++;
            }

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
          run-id: ${{ github.run_id }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install twine
        run: pip install twine

      - name: Publish server package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_SERVER_TOKEN }}
        run: |
          twine upload dist/chaukas_spec_server-*