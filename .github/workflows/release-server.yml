name: Release Server Package

on:
  workflow_dispatch:
    inputs:
      client_run_id:
        description: 'Run ID of the client workflow that built the packages'
        required: true
        type: string
      artifact_name:
        description: 'Name of the artifact containing the packages'
        required: true
        type: string

jobs:
  publish-server:
    name: Publish Server Package to PyPI
    runs-on: ubuntu-latest
    
    steps:
      - name: Download package artifacts from client workflow
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get artifacts from the client workflow run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: '${{ inputs.client_run_id }}'
            });
            
            const packageArtifact = artifacts.artifacts.find(a => a.name === '${{ inputs.artifact_name }}');
            if (!packageArtifact) {
              throw new Error('Package artifacts not found from client workflow');
            }
            
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: packageArtifact.id,
              archive_format: 'zip'
            });
            
            // Create dist directory and save the zip
            fs.mkdirSync('dist', { recursive: true });
            fs.writeFileSync('artifacts.zip', Buffer.from(download.data));
            
            // Extract the zip file
            const { execSync } = require('child_process');
            execSync('unzip -o artifacts.zip -d dist/');
            execSync('ls -la dist/');
            
            console.log('âœ… Package artifacts downloaded successfully');

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install twine
        run: pip install twine

      - name: Publish server package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_SERVER_TOKEN }}
        run: |
          twine upload dist/chaukas_spec_server-*